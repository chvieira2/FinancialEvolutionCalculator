Create scenarios:
- Poor: low salary (1350/month net), low living costs, rent only
- Middle: 60k (3600k/month gross), mid living costs, rent/buy?
- Up-middle: 80k, high living costs, rent/buy?
- Diff living goals: early retirement, sustained living standards, generational wealth

Ideas:
- Reorder y axis tornado plot to follow same order as sensitivity analysis
- Set minimum for y axis in sensitivity plots to -500
- Add to sensitivity analysis for investment properties how much cold rent is charged
- Sensitivity plot - define in facet plot if property is investment or home

- Inflation: Fix values to inflation in calculation unless set by user (living cost growth for example)
- Double check mortgage rate not impacting overall asset outcome. Counter-intuitive, no? Same for price of flat for investment? Cold rent should be fixed to the price of flat, let user give flat square meter -> calculate sqm price and cold rent
- Create comparison plots




Bugs:
- Bug with many investment properties not properly leading to debt if bought on same year? Due to not mortgage calculation only checking investment and not if other properties are been bought together
- Bug where running sensitivity analysis and then changing year ranges freezes plots until values are refreshed (e.g. by changing any parameter in the side bar). Interestingly, running sensitivitiy analysis again uses the new values for year range -> I think this might be related to RShiny working with navegation tabs messing up the timing of updates
- Bug: After including some print messages in the app.R code creating the processed_data, I learned that upon start of the app the processed_data is been created two times consecutively. Why is that the case and how to fix it?
- Bug: I noticed a weird behavior in my app. Sometimes in the sensitivity analysis tab, the parameter selection checkboxes are not rendered. If I go back to the sidebar and delete/add a property, then the checkbox is rendered. Why is that the case and how to fix it? I'd imagine that first rendering the base_parameters and then adding the property parameters could solve the issue. What do you think?




You are an expert software developer with deep and broad knowledge in the programming language R and computational sciences. In particular, you are expert in creating R shiny apps. You are also an expert in data structures, algorithms, programmatic logic, object oriented programming, and many other topics in computer science area. You reason and consider pros and cons of every step in your logic. You write efficient and easy to read code following good practices of software development. Your only goal is to help me.

The context is that I'm creating a complex shiny app that behaves like a dashboard. The app is centered around an R6 class object that makes some calculations given a set of initial parameters. This class receives the input values from the app and outputs a data frame with several columns. The app then should use this output table for plotting and several other functionalities. Therefore, the app is responsive to the inputs by using this intermediary Class to execute calculations on the given inputs.

Let's start with that. Here's how each of the files in my code look like.
app.R:
```
library(shiny)
library(bslib)
library(jsonlite)
library(yaml)
library(shinyBS)
library(uuid)

source(file.path("R", "classes", "DataProcessorClass.R"))
source(file.path("R", "utils", "helper_functions.R"))
source(file.path("R", "constants.R"))

# Module sources
source(file.path("modules", "plots", "plotYearlyAssetProgressionModule.R"))
source(file.path("modules", "plots", "comparisonPlotsModule.R"))
source(file.path("modules", "sidebar", "sidebarInputModule.R"))
source(file.path("modules", "sidebar", "propertyManagementModule.R"))
source(file.path("modules", "plots", "financialMetricsModule.R"))
source(file.path("modules", "plots", "stackedAreaPlotModule.R"))
source(file.path("modules", "sensitivityAnalysisModule.R"))

# Load configuration
input_config <- safelyLoadConfig(file.path("config", "defaults", "inputs.yaml"))

ui <- bslib::page_navbar(
  title = "Financial Evolution Calculator",

  theme = bslib::bs_theme(
    version = 5,
    bootswatch = "default"
  ),

  header = tags$head(
    tags$link(rel = "stylesheet",
              href = "https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"),
    tags$link(rel = "stylesheet", href = "css/styles.css"),
    tags$script(src = "https://code.jquery.com/jquery-3.6.0.min.js"),
    tags$script(src = "https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"),
    tags$script(src = "js/main.js")
  ),

  nav_panel(
    title = "Analysis",
    sidebarLayout(
      sidebarPanel(
        class = "sidebar-panel",
        width = 3,
        sidebarInputModuleUI("sidebar_inputs", initial_config = input_config)
      ),
      mainPanel(
        width = 9,
        fluidRow(
          column(
            width = 6,
            sliderInput("global_year_range", "Year range:",
                        min = 2025, max = 2075,
                        value = c(2025, 2075),
                        step = 1,
                        sep = "")
          ),
          column(
            width = 6,
            div(
              style = "margin-top: 25px;",
              downloadButton("download_calculations", "Save Financial Evolution",
                             class = "btn-sm"),
              actionButton("add_to_comparison", "Add to Comparison",
                           class = "btn-sm")
            )
          )
        ),
        fluidRow(
          column(
            width = 6,
            card(
              style = "height: 400px;",
              card_header("Asset Evolution"),
              plotYearlyAssetProgressionModuleUI("result_plot")
            )
          ),
          column(
            width = 6,
            card(
              style = "height: 400px;",
              card_header("Financial Metrics"),
              financialMetricsModuleUI("financial_metrics")
            )
          )
        ),
        fluidRow(
          column(
            width = 6,
            card(
              style = "height: 400px;",
              card_header("Expenses Components"),
              stackedAreaPlotModuleUI("expense_components", plot_type = "expenses")
            )
          ),
          column(
            width = 6,
            card(
              style = "height: 400px;",
              card_header("Income Components"),
              stackedAreaPlotModuleUI("income_components", plot_type = "income")
            )
          )
        )
      )
    )
  ),

  nav_panel(
    title = "Scenario Sensitivity Analysis",
    sensitivityAnalysisModuleUI("sensitivity_analysis")
  ),

  nav_panel(
    title = "Comparison",
    comparisonPlotsModuleUI("comparison_plots")
  )
)

server <- function(input, output, session) {
  # Initialize input values with defaults from input_config
  reactive_config <- reactiveVal(input_config)

  # Call the sidebar input module
  sidebarInputModuleServer("sidebar_inputs", reactive_config)

  # Create a reactive expression for the year range
  year_range <- reactive({
    input$global_year_range
  })

  # Reactive expression for processed data
  processed_data <- reactive({
    req(reactive_config(), year_range())
    data_processor <- DataProcessor$new(scenario_name = "example",
                                        config = reactive_config(),
                                        initial_year = min(year_range()),
                                        final_year = max(year_range()))
    data_processor$calculate()
    results <- data_processor$get_results()
    # For Debugging
    print("processed_data updated")
    return(results)
  })

  # Plot module
  plotYearlyAssetProgressionModuleServer("result_plot", processed_data, year_range)
  financialMetricsModuleServer("financial_metrics", processed_data, year_range)
  stackedAreaPlotModuleServer("expense_components", processed_data, year_range, plot_type = "expenses")
  stackedAreaPlotModuleServer("income_components", processed_data, year_range, plot_type = "income")

  # Download handler for financial calculations
  output$download_calculations <- downloadHandler(
    filename = function() {
      paste0("financial_evolution_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".csv")
    },
    content = function(file) {
      # Get current processed data
      data <- isolate(processed_data())

      # Write to CSV file
      write.csv(data, file, row.names = FALSE)
    }
  )

  # Sensitivity analysis module
  sensitivityAnalysisModuleServer("sensitivity_analysis", reactive_config, processed_data, year_range)

  # Observer for add to comparison button (placeholder for now)
  observeEvent(input$add_to_comparison, {
    # This will be implemented later
    showNotification("Add to comparison functionality will be implemented soon",
                     type = "message")
  })

  # Call the comparison plots module
  comparisonPlotsModule("comparison_plots", comparison_list)
}

shinyApp(ui, server)

```






sidebarInputModule.R
```
library(shiny)
library(bslib)
library(purrr)

source(file.path("R", "constants.R"))
source(file.path("R", "utils", "helper_functions.R"))
source(file.path("R", "utils", "validation.R"))

sidebarInputModuleUI <- function(id, initial_config) {
  ns <- NS(id)

  # Helper function to create static inputs
  createStaticInput <- function(input_item, section) {
    input_id <- ns(paste0(section, "_", input_item$id))

    input_element <- createInputElement(
      input_item$type,
      input_id,
      input_item
    )

    info_icon <- createInfoIcon(input_item$description)

    createInputContainer(input_item$label, input_element, info_icon)
  }

  # Create static UI elements
  static_inputs <- if (!is.null(initial_config)) {
    lapply(names(initial_config), function(section) {
      section_inputs <- initial_config[[section]]$inputs
      essential_params <- ESSENTIAL_PARAMS[[section]]

      essential_inputs <- section_inputs[sapply(section_inputs,
                                                function(x) x$id %in% essential_params)]
      non_essential_inputs <- section_inputs[sapply(section_inputs,
                                                    function(x) !x$id %in% essential_params)]

      div(
        h3(style = "font-size: 1.5rem; margin-top: 15px; margin-bottom: 10px;",
           initial_config[[section]]$title),
        div(id = ns(paste0(section, "_essential")),
            lapply(essential_inputs, createStaticInput, section = section)),
        if (length(non_essential_inputs) > 0) {
          tagList(
            actionButton(
              inputId = ns(paste0(section, "_toggle")),
              label = "Show more parameters",
              class = "collapse-toggle",
              style = "border: none; background: none; color: #007bff; padding: 0; font-size: 0.8rem;"
            ),
            div(
              id = ns(paste0(section, "_non_essential")),
              class = "collapse",
              lapply(non_essential_inputs, createStaticInput, section = section)
            )
          )
        }      )
    })
  }

  tagList(
    div(class = "sidebar-title", "Financial Evolution Scenario"),
    # Scenario management buttons container
    div(
      style = "padding: 0;",
      # Custom styling for file input and download button
      tags$style(HTML(sprintf("
        /* Container styling */
        .scenario-buttons-container {
          display: flex;
          flex-direction: column;
          gap: 0;
          align-items: flex-start;
          width: auto;
        }

        /* File input styling */
        #%s {
          margin: 0;
          width: auto;
        }
        #%s .form-group {
          margin: 0;
          width: auto;
        }
        #%s .input-group {
          margin: 0;
          width: auto;
        }
        #%s label {
          display: none;
        }
        #%s .form-control {
          display: none;
        }
        /* Hide progress bar */
        .shiny-file-input-progress {
          display: none;
        }
        /* Target the actual button inside file input */
        .btn-file {
          padding: 1px 6px !important;
          font-size: 0.8rem !important;
          line-height: 1 !important;
          height: 22px !important;
          white-space: nowrap !important;
          display: inline-flex !important;
          align-items: center !important;
          justify-content: center !important;
          width: auto !important;
          margin: 0 !important;
        }

        /* Save button styling */
        .save-scenario-btn {
          padding: 2px 8px;
          font-size: 0.8rem;
          white-space: nowrap;
          display: inline-flex;
          align-items: center;
          justify-content: center;
          min-height: 22px;
          width: auto;
          margin: 0;
        }

        /* Additional fixes for input group */
        .input-group-btn, .input-group-prepend {
          margin: 0;
          padding: 0;
          display: inline-block;
        }

        /* Remove any remaining spaces */
        .shiny-input-container {
          margin: 0 !important;
          padding: 0 !important;
        }
      ", ns("scenario_file"), ns("scenario_file"), ns("scenario_file"),
                              ns("scenario_file"), ns("scenario_file")))),

      div(
        class = "scenario-buttons-container",
        div(
          style = "width: auto; margin: 0; padding: 0;",
          fileInput(
            ns("scenario_file"),
            label = NULL,
            accept = c(".yml", ".yaml"),
            buttonLabel = "Load Scenario",
            placeholder = NULL
          )
        ),
        downloadButton(
          ns("save_scenario"),
          "Save Current Scenario",
          class = "btn-default save-scenario-btn"
        )
      )
    ),
    # Thinner divider
    tags$hr(style = "margin: 5px 0;"),
    # Rest of the inputs
    div(
      id = ns("static_inputs_container"),
      static_inputs,
      propertyManagementUI(ns("property_management"), initial_config = initial_config)
    )
  )
}

sidebarInputModuleServer <- function(id, reactive_config) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns

    # Initialize local_config
    local_config <- reactiveVal(NULL)

    # Set initial config
    observe({
      local_config(reactive_config())
    })

    # Create a debounced reactive for the config
    debounced_config <- reactive({
      local_config()
    }) %>% debounce(1000)

    # Handle input changes
    observe({
      req(local_config())

      # Get all input values that have changed
      current_inputs <- reactiveValuesToList(input)

      # Isolate the update to prevent circular reactions
      isolate({
        updated_config <- local_config()
        any_changes <- FALSE

        # Handle regular inputs
        for (section in names(updated_config)) {
          if (section != "properties") {
            for (i in seq_along(updated_config[[section]]$inputs)) {
              input_item <- updated_config[[section]]$inputs[[i]]
              input_id <- paste0(section, "_", input_item$id)
              input_value <- current_inputs[[input_id]]

              if (!is.null(input_value) && !identical(input_value, input_item$value)) {
                updated_config[[section]]$inputs[[i]]$value <- input_value
                any_changes <- TRUE
              }
            }
          }
        }

        # Handle property inputs
        if (!is.null(updated_config$properties)) {
          for (i in seq_along(updated_config$properties)) {
            property <- updated_config$properties[[i]]
            for (j in seq_along(property$inputs)) {
              input_item <- property$inputs[[j]]
              input_id <- paste0(property$name, "_", input_item$id)
              input_value <- current_inputs[[input_id]]

              if (!is.null(input_value) && !identical(input_value, input_item$value)) {
                updated_config$properties[[i]]$inputs[[j]]$value <- input_value
                any_changes <- TRUE
              }
            }
          }
        }

        if (any_changes) {
          local_config(updated_config)
          reactive_config(updated_config)
        }
      })
    })

    # Handle file upload
    observeEvent(input$scenario_file, {
      req(input$scenario_file)

      tryCatch({
        uploaded_config <- safelyLoadConfig(input$scenario_file$datapath)

        if (!is.null(uploaded_config)) {
          validation_result <- validateConfig(uploaded_config)

          if (validation_result$is_valid) {
            # Completely replace the configuration in one go
            reactive_config(uploaded_config)

            # Update regular inputs
            for (section in names(uploaded_config)) {
              if (section != "properties") {
                for (input_item in uploaded_config[[section]]$inputs) {
                  input_id <- paste0(section, "_", input_item$id)
                  updateInput(session, input_id, input_item)
                }
              }
            }

            showNotification("Scenario configuration successfully loaded",
                             type = "message", duration = 3)
          } else {
            showNotification(
              paste("Invalid configuration:",
                    paste(validation_result$messages, collapse = "; ")),
              type = "error",
              duration = 5
            )
          }
        }
      }, error = function(e) {
        showNotification(
          paste("Error loading scenario:", e$message),
          type = "error",
          duration = 5
        )
      })
    }, ignoreInit = TRUE)

    # Add download handler for scenario configuration
    output$save_scenario <- downloadHandler(
      filename = function() {
        paste0("financial_scenario_", format(Sys.time(), "%Y%m%d_%H%M%S"), ".yaml")
      },
      content = function(file) {
        # Get current configuration
        current_config <- isolate(reactive_config())

        # Write to YAML file
        yaml::write_yaml(current_config, file)
      }
    )

    # Call the property management module server
    propertyManagementServer("property_management", reactive_config)

    return(local_config)
  })
}

# Helper function to update inputs
updateInput <- function(session, input_id, input_item) {
  if (input_item$type == "sliderInput") {
    updateSliderInput(session, input_id, value = input_item$value)
  } else {
    updateNumericInput(session, input_id, value = input_item$value)
  }
}
```





propertyManagementModule.R:
```
library(shiny)
library(bslib)

source(file.path("R", "constants.R"))
source(file.path("R", "utils", "helper_functions.R"))

# Load property defaults
property_defaults <- safelyLoadConfig(file.path("config", "defaults", "PropertyDefaultValues.yaml"))

propertyManagementUI <- function(id, initial_config) {
  ns <- NS(id)

  # Create a local reactive value to store property state
  local_properties <- reactiveVal(NULL)

  # Create property input fields
  createPropertyInputs <- function(property) {
    property_name <- make.names(property$name)

    div(
      id = ns(paste0("property_", property_name)),
      div(
        style = "border-bottom: 1px solid #dee2e6; margin-bottom: 10px; padding-bottom: 5px;",
        # Header
        div(
          style = "display: flex; justify-content: space-between; align-items: center;",
          h4(
            style = "margin: 0; font-size: 0.9rem;",
            paste0(property$name, " (", property$type, ")")
          ),
          createDeleteButton(ns, property$name)
        ),
        # All inputs in one section
        div(
          style = "margin-top: 5px;",
          lapply(property$inputs, function(input_item) {
            input_id <- paste0(property$name, "_", input_item$id)

            div(
              class = "sidebar-input-container",
              style = "display: flex; align-items: center; justify-content: space-between; margin-bottom: 5px;",
              div(
                style = "flex: 3.5; margin-right: 15px;",
                tags$label(input_item$label)
              ),
              div(
                style = "flex: 1.5;",
                numericInput(
                  ns(input_id),
                  label = NULL,
                  value = input_item$value
                )
              )
            )
          })
        )
      )
    )
  }

  tagList(
    h3("Properties owned:"),
    uiOutput(ns("property_list")),
    h3("Add new property:"),
    div(
      style = "margin-top: 10px;",
      textInput(ns("new_property_name"), "Property name (optional)"),
      radioButtons(
        inputId = ns("new_property_type"),
        label = "Property type",
        choices = PROPERTY_TYPES,
        inline = TRUE
      ),
      actionButton(ns("add_property"), "Add property")
    )
  )
}

propertyManagementServer <- function(id, reactive_config) {
  moduleServer(id, function(input, output, session) {
    ns <- session$ns

    # Create property with unique ID
    createPropertyWithId <- function(property) {
      if (is.null(property$id)) {
        property$id <- uuid::UUIDgenerate()  # Add uuid package to dependencies
      }
      return(property)
    }

    # # Create a local reactive value to store property state
    # local_properties <- reactiveVal(NULL)
    #
    # # Update local properties when reactive_config changes
    # observeEvent(reactive_config(), {
    #   # print("Updating local properties from reactive_config")
    #   local_properties(reactive_config()$properties)
    # }, ignoreInit = FALSE)

    # Render property list
    output$property_list <- renderUI({
      req(reactive_config())
      properties <- reactive_config()$properties

      # For Debugging:
      # print("\nRendering property list:")
      # if (!is.null(properties)) {
      #   for (prop in properties) {
      #     print(sprintf("Property: %s (Type: %s)", prop$name, prop$type))
      #     key_params <- c("value_today", "purchase_year", "sale_year", "loan_family_friends")
      #     for (param_id in key_params) {
      #       param <- Find(function(x) x$id == param_id, prop$inputs)
      #       if (!is.null(param)) {
      #         print(sprintf("  %s: %s", param_id, param$value))
      #       }
      #     }
      #   }
      # }

      if (is.null(properties) || length(properties) == 0) {
        return(div(
          style = "font-style: italic; color: #666; font-size: 0.8rem; margin: 10px 0;",
          "No properties added yet"
        ))
      }

      # Create property cards with debugging
      property_cards <- lapply(properties, function(property) {
        # Ensure property has an ID
        if (is.null(property$id)) {
          property$id <- uuid::UUIDgenerate()
        }
        # For Debugging
        # print(paste("Creating card for property:", property$name))
        # # Print only key input values
        # key_params <- c("value_today", "purchase_year", "sale_year", "loan_family_friends")
        # for (param_id in key_params) {
        #   param <- Find(function(x) x$id == param_id, property$inputs)
        #   if (!is.null(param)) {
        #     print(sprintf("  %s: %s", param_id, param$value))
        #   }
        # }

        div(
          id = ns(paste0("property_", property$id)),
          div(
            style = "border-bottom: 1px solid #dee2e6; margin-bottom: 10px; padding-bottom: 5px;",
            # Header
            div(
              style = "display: flex; justify-content: space-between; align-items: center;",
              h4(
                style = "margin: 0; font-size: 0.9rem;",
                paste0(property$name, " (", property$type, ")")
              ),
              createDeleteButton(ns, property$id)
            ),
            # All inputs in one section
            div(
              style = "margin-top: 5px;",
              lapply(property$inputs, function(input_item) {
                input_id <- paste0(property$id, "_", input_item$id)

                div(
                  class = "sidebar-input-container",
                  style = "display: flex; align-items: center; justify-content: space-between; margin-bottom: 5px;",
                  div(
                    style = "flex: 3.5; margin-right: 15px;",
                    tags$label(input_item$label)
                  ),
                  div(
                    style = "flex: 1.5;",
                    numericInput(
                      ns(input_id),
                      label = NULL,
                      value = input_item$value
                    )
                  )
                )
              })
            )
          )
        )
      })

      do.call(tagList, property_cards)
    })

    # Handle adding new property
    observeEvent(input$add_property, {
      property_defaults <- safelyLoadConfig(file.path("config", "PropertyDefaultValues.yaml"))

      new_property_name <- if (input$new_property_name != "") {
        input$new_property_name
      } else {
        existing_names <- sapply(isolate(reactive_config()$properties), function(p) p$name)
        i <- 1
        while (paste0("property", i) %in% existing_names) {
          i <- i + 1
        }
        paste0("property", i)
      }

      # Get default values for the selected property type
      property_type <- input$new_property_type
      default_values <- property_defaults$properties[[
        which(sapply(property_defaults$properties, function(x) x$type == property_type))
      ]]$inputs

      new_property <- list(
        name = new_property_name,
        type = property_type,
        inputs = default_values
      )

      # Update configuration with new property
      updated_config <- isolate(reactive_config())
      updated_config$properties <- c(updated_config$properties, list(new_property))
      reactive_config(updated_config)

      # Reset property name input
      updateTextInput(session, "new_property_name", value = "")
    })

    # Handle property deletion
    observeEvent(input$delete_property_trigger, {
      property_id <- input$delete_property_trigger

      updated_config <- isolate(reactive_config())
      property_index <- which(sapply(updated_config$properties, function(p) p$id == property_id))

      if (length(property_index) > 0) {
        updated_config$properties <- updated_config$properties[-property_index]
        reactive_config(updated_config)
      }
    })

    # Handle property input changes
    observe({
      req(reactive_config())
      updated_config <- isolate(reactive_config())

      if (!is.null(updated_config$properties)) {
        any_changes <- FALSE

        for (i in seq_along(updated_config$properties)) {
          property <- updated_config$properties[[i]]
          # Ensure property has an ID
          if (is.null(property$id)) {
            property$id <- uuid::UUIDgenerate()
            updated_config$properties[[i]]$id <- property$id
            any_changes <- TRUE
          }

          for (j in seq_along(property$inputs)) {
            input_item <- property$inputs[[j]]
            input_id <- paste0(property$id, "_", input_item$id)  # Use ID instead of name
            current_value <- input[[input_id]]

            if (!is.null(current_value) && !identical(current_value, input_item$value)) {
              updated_config$properties[[i]]$inputs[[j]]$value <- current_value
              any_changes <- TRUE
            }
          }
        }

        if (any_changes) {
          reactive_config(updated_config)
        }
      }
    })
  })
}
```






helper_functions.R:
```
#' Safely load YAML configuration
#' @param file_path Path to the YAML file
#' @return Configuration list or NULL if error
safelyLoadConfig <- function(file_path) {
  tryCatch({
    yaml::read_yaml(file_path)
  }, error = function(e) {
    warning(sprintf("Error loading config file %s: %s", file_path, e$message))
    NULL
  })
}

#' Create an input element based on type and configuration
#' @param input_type The type of input ("numericInput", "sliderInput", etc.)
#' @param input_id The ID for the input element
#' @param input_config List of configuration parameters
#' @return A Shiny input element
createInputElement <- function(input_type, input_id, input_config) {
  switch(input_type,
         "numericInput" = numericInput(
           input_id,
           label = NULL,
           value = input_config$value
         ),
         "sliderInput" = sliderInput(
           input_id,
           label = NULL,
           min = input_config$min,
           max = input_config$max,
           value = input_config$value,
           step = input_config$step
         ),
         # Default to numericInput
         numericInput(
           input_id,
           label = NULL,
           value = input_config$value
         )
  )
}

#' Create an info icon with tooltip
#' @param description The tooltip text
#' @return A tags element containing the icon
createInfoIcon <- function(description) {
  tags$i(
    class = "fas fa-info-circle info-icon",
    title = description,
    `data-toggle` = "tooltip"
  )
}

#' Create a container div for sidebar inputs
#' @param label The input label
#' @param input_element The Shiny input element
#' @param info_icon The info icon element
#' @return A div containing the formatted input
createInputContainer <- function(label, input_element, info_icon) {
  div(
    class = "sidebar-input-container",
    style = "display: flex; align-items: center; justify-content: space-between; margin-bottom: 5px;",
    div(
      style = "flex: 3.5; margin-right: 15px; display: flex; align-items: center;",
      tags$label(label, `for` = input_element$attribs$id,
                 style = "margin-bottom: 0px; margin-top: 0px; line-height: 1;"),
      div(style = "margin-left: 5px;", info_icon)
    ),
    div(style = "flex: 1.5;", input_element)
  )
}

#' Create a property input
#' @param input_item Input configuration
#' @param property_name Name of the property
#' @param ns Namespace function
#' @return A div containing the property input
createPropertyInput <- function(input_item, property_name, ns) {
  input_id <- ns(paste0(property_name, "_", input_item$id))

  input_element <- createInputElement(
    input_item$type,
    input_id,
    input_item
  )

  info_icon <- createInfoIcon(input_item$description)

  createInputContainer(input_item$label, input_element, info_icon)
}

#' Create a delete button for a property
#' @param ns Namespace function
#' @param property_id Name of the property
#' @return An actionButton
createDeleteButton <- function(ns, property_id) {
  actionButton(
    inputId = ns(paste0("delete_property_", property_id)),
    label = "Delete",
    class = "btn-sm",
    style = "padding: 1px 5px; font-size: 0.8rem;"
  ) %>%
    tagAppendAttributes(
      onclick = sprintf(
        "Shiny.setInputValue('%s', '%s', {priority: 'event'});",
        ns("delete_property_trigger"),
        property_id
      )
    )
}

#' Get parameter value from config
#' @param config Configuration list
#' @param parameter_id Parameter identifier in format "section.parameter" or "properties.property_name.parameter"
#' @return Parameter value or NULL if not found
#' @examples
#' get_parameter_value(config, "taxes_description.inflation")
#' get_parameter_value(config, "properties.property1.value_growth")
get_parameter_value <- function(config, parameter_id) {
  # Split parameter_id into parts
  parts <- strsplit(parameter_id, "\\.")[[1]]

  # Handle properties separately
  if (parts[1] == "properties") {
    if (length(parts) != 3) {
      warning("Invalid property parameter id format")
      return(NULL)
    }

    property_name <- parts[2]
    param_id <- parts[3]

    # Find the property
    property <- NULL
    for (p in config$properties) {
      if (p$name == property_name) {
        property <- p
        break
      }
    }

    if (is.null(property)) {
      return(NULL)
    }

    # Find the parameter in property inputs
    for (input in property$inputs) {
      if (input$id == param_id) {
        return(input$value)
      }
    }

  } else {
    # Handle regular parameters
    section <- parts[1]
    param_id <- parts[2]

    # Check if section exists
    if (!section %in% names(config)) {
      return(NULL)
    }

    # Find parameter in section inputs
    for (input in config[[section]]$inputs) {
      if (input$id == param_id) {
        return(input$value)
      }
    }
  }

  return(NULL)
}

#' Modify parameter value in config
#' @param config Configuration list
#' @param parameter_id Parameter identifier in format "section.parameter" or "properties.property_name.parameter"
#' @param new_value New value for the parameter
#' @return Modified configuration list
#' @examples
#' modify_config(config, "taxes_description.inflation", 2.5)
#' modify_config(config, "properties.property1.value_growth", 5.0)
modify_config <- function(config, parameter_id, new_value) {
  # Create a copy of the config
  modified_config <- config

  # Split parameter_id into parts
  parts <- strsplit(parameter_id, "\\.")[[1]]

  # Handle properties separately
  if (parts[1] == "properties") {
    if (length(parts) != 3) {
      warning("Invalid property parameter id format")
      return(config)
    }

    property_name <- parts[2]
    param_id <- parts[3]

    # Find and modify the property
    for (i in seq_along(modified_config$properties)) {
      if (modified_config$properties[[i]]$name == property_name) {
        for (j in seq_along(modified_config$properties[[i]]$inputs)) {
          if (modified_config$properties[[i]]$inputs[[j]]$id == param_id) {
            modified_config$properties[[i]]$inputs[[j]]$value <- new_value
            return(modified_config)
          }
        }
      }
    }

  } else {
    # Handle regular parameters
    section <- parts[1]
    param_id <- parts[2]

    # Check if section exists
    if (!section %in% names(modified_config)) {
      return(config)
    }

    # Find and modify parameter in section inputs
    for (i in seq_along(modified_config[[section]]$inputs)) {
      if (modified_config[[section]]$inputs[[i]]$id == param_id) {
        modified_config[[section]]$inputs[[i]]$value <- new_value
        return(modified_config)
      }
    }
  }

  return(modified_config)
}
```






validation.R:
```
#' Validate numeric input within bounds
#' @param value The input value
#' @param min Minimum allowed value
#' @param max Maximum allowed value
#' @param name Name of the input for error messages
#' @return List with is_valid and message
validateNumericBounds <- function(value, min = NULL, max = NULL, name = "Value") {
  if (!is.numeric(value)) {
    return(list(
      is_valid = FALSE,
      message = sprintf("%s must be a numeric value", name)
    ))
  }

  if (!is.null(min) && value < min) {
    return(list(
      is_valid = FALSE,
      message = sprintf("%s must be greater than or equal to %s", name, min)
    ))
  }

  if (!is.null(max) && value > max) {
    return(list(
      is_valid = FALSE,
      message = sprintf("%s must be less than or equal to %s", name, max)
    ))
  }

  list(is_valid = TRUE, message = NULL)
}

#' Validate year input
#' @param year Year value to validate
#' @param min_year Minimum allowed year
#' @param max_year Maximum allowed year
#' @param name Name of the year input
#' @return List with is_valid and message
validateYear <- function(year, min_year = 2025, max_year = 2100, name = "Year") {
  validateNumericBounds(year, min_year, max_year, name)
}

#' Validate percentage input
#' @param value Percentage value to validate
#' @param name Name of the percentage input
#' @return List with is_valid and message
validatePercentage <- function(value, name = "Percentage") {
  validateNumericBounds(value, 0, 100, name)
}

#' Validate property configuration
#' @param property Property configuration to validate
#' @return List with is_valid and messages
validateProperty <- function(property) {
  messages <- character(0)

  # Required fields
  required_fields <- c("name", "type", "inputs")
  missing_fields <- required_fields[!required_fields %in% names(property)]

  if (length(missing_fields) > 0) {
    messages <- c(messages,
                  sprintf("Missing required fields: %s", paste(missing_fields, collapse = ", ")))
  }

  # Validate property type
  if (!property$type %in% c("home", "investment")) {
    messages <- c(messages,
                  sprintf("Invalid property type: %s. Must be 'home' or 'investment'", property$type))
  }

  # Validate inputs
  if (!is.null(property$inputs)) {
    for (input in property$inputs) {
      if (input$id == "value_today") {
        result <- validateNumericBounds(input$value, 0, NULL, "Property value")
        if (!result$is_valid) messages <- c(messages, result$message)
      }
      if (input$id == "purchase_year") {
        result <- validateYear(input$value)
        if (!result$is_valid) messages <- c(messages, result$message)
      }
      if (input$id == "sale_year") {
        result <- validateYear(input$value)
        if (!result$is_valid) messages <- c(messages, result$message)
      }
    }
  }

  list(
    is_valid = length(messages) == 0,
    messages = messages
  )
}

#' Validate entire configuration
#' @param config Configuration to validate
#' @return List with is_valid and messages
validateConfig <- function(config) {
  messages <- character(0)

  # Validate general life section
  if (!is.null(config$general_life)) {
    for (input in config$general_life$inputs) {
      if (input$id == "net_annual_income") {
        result <- validateNumericBounds(input$value, 0, NULL, "Net annual income")
        if (!result$is_valid) messages <- c(messages, result$message)
      }
      if (input$id == "expected_year_retirement") {
        result <- validateYear(input$value)
        if (!result$is_valid) messages <- c(messages, result$message)
      }
    }
  }

  # Validate properties
  if (!is.null(config$properties)) {
    for (property in config$properties) {
      result <- validateProperty(property)
      if (!result$is_valid) {
        messages <- c(messages,
                      sprintf("Property '%s': %s", property$name, paste(result$messages, collapse = "; ")))
      }
    }
  }

  list(
    is_valid = length(messages) == 0,
    messages = messages
  )
}
```





sensitivityAnalysisModule.R:
```
library(shiny)
library(ggplot2)
library(dplyr)
library(tidyr)
library(bslib)
library(shinyWidgets)



# Base parameters (non-property ones)
base_parameters <- list(
  list(
    id = "taxes_description.inflation",
    name = "Average Annual Inflation",
    color = "#E41A1C",
    type = "percentage"
  ),
  list(
    id = "general_life.living_style_costs",
    name = "Average Annual Living Standard Costs",
    color = "#377EB8",
    type = "currency"
  ),
  list(
    id = "general_life.salaries_growth_start_career",
    name = "Average Annual Salary Growth",
    color = "#4DAF4A",
    type = "percentage"
  ),
  list(
    id = "passive_investing.expected_return_on_investment",
    name = "Average Annual Investment Returns",
    color = "#984EA3",
    type = "percentage"
  ),
  list(
    id = "rental.rental_prices_growth",
    name = "Average Annual Rental Growth",
    color = "#FFFF33",
    type = "percentage"
  )
)

# Property parameter template
property_parameter_template <- list(
  value_growth = list(
    id_suffix = "value_growth",
    name_suffix = "Average Annual Property Value Growth",
    color = "#FF7F00",
    type = "percentage"
  ),
  value_today = list(
    id_suffix = "value_today",
    name_suffix = "Property Price Today",
    color = "#8B4513",
    type = "currency"
  ),
  purchase_year = list(
    id_suffix = "purchase_year",
    name_suffix = "Property Purchase Year",
    color = "#2F4F4F",
    type = "year"
  ),
  initial_interest_rate = list(
    id_suffix = "initial_interest_rate",
    name_suffix = "Mortgage Interest Rate at Purchase",
    color = "#800080",
    type = "percentage"
  )
)

sensitivityAnalysisModuleUI <- function(id) {
  ns <- NS(id)

  tagList(
    # Control panel in a single card
    fluidRow(
      column(
        width = 12,
        card(
          card_header("Sensitivity Analysis Settings"),
          card_body(
            div(
              class = "row",
              # First column (wider) - Parameters
              div(
                class = "col-8",
                # Base parameters
                div(
                  style = "margin-bottom: 20px;",
                  h4("Base Parameters"),
                  checkboxGroupInput(
                    ns("base_parameters"),
                    NULL,
                    choices = setNames(
                      sapply(base_parameters, `[[`, "id"),
                      sapply(base_parameters, `[[`, "name")
                    ),
                    selected = sapply(base_parameters, `[[`, "id"),
                    inline = TRUE
                  )
                ),
                # Property parameters section
                div(
                  style = "margin-bottom: 20px;",
                  div(
                    style = "display: flex; justify-content: space-between; align-items: center;",
                    h4("Property Parameters"),
                    actionButton(
                      ns("load_property_params"),
                      "Load/Reload Property Parameters",
                      class = "btn-sm btn-secondary"
                    )
                  ),
                  # Property parameters will be loaded here
                  uiOutput(ns("property_parameters"))
                ),
                # Run Analysis button below parameters
                div(
                  style = "text-align: left; margin-top: 20px;",
                  actionButton(
                    ns("run_analysis"),
                    "Run Analysis",
                    class = "btn-primary btn-lg"
                  )
                )
              ),
              # Second column (narrower) - Analysis Settings
              div(
                class = "col-4",
                div(
                  style = "background-color: #f8f9fa; padding: 15px; border-radius: 5px;",
                  h4("Analysis Configuration"),
                  div(
                    style = "margin-bottom: 20px;",
                    sliderInput(
                      ns("variation_range"),
                      "Parameter Variation Range (%)",
                      min = -100, max = 100,
                      value = c(-20, 20),
                      step = 10,
                      width = "100%"
                    )
                  ),
                  div(
                    numericInput(
                      ns("steps"),
                      "Number of Steps",
                      value = 7,
                      min = 3,
                      max = 9,
                      width = "100%"
                    )
                  )
                )
              )
            )
          )
        )
      )
    ),

    # Faceted plots
    fluidRow(
      column(
        width = 12,
        uiOutput(ns("sensitivity_plot_container"))
      )
    ),

    # Combined tornado plot
    fluidRow(
      column(
        width = 12,
        uiOutput(ns("tornado_plot_container"))
      )
    )
  )
}

sensitivityAnalysisModuleServer <- function(id, reactive_config, processed_data, year_range) {
  moduleServer(id, function(input, output, session) {

    # Reactive value to store property parameters
    property_params <- reactiveVal(NULL)

    # Reactive value to store the selected parameters at time of analysis
    selected_parameters_snapshot <- reactiveVal(NULL)

    # Handler for loading property parameters
    observeEvent(input$load_property_params, {
      req(reactive_config())

      # Get properties from config
      properties <- reactive_config()$properties

      if (!is.null(properties)) {
        # For each property, add its parameters
        property_params_list <- lapply(properties, function(property) {
          lapply(property_parameter_template, function(template) {
            list(
              id = sprintf("properties.%s.%s",
                           property$name,
                           template$id_suffix),
              name = sprintf("%s (%s)",
                             template$name_suffix,
                             property$name),
              color = template$color,
              type = template$type
            )
          })
        })

        # Flatten the property parameters list
        property_params(unlist(property_params_list, recursive = FALSE))
      } else {
        property_params(NULL)
      }
    })

    # Render property parameters checkboxes
    output$property_parameters <- renderUI({
      params <- property_params()

      if (is.null(params)) {
        return(div(
          style = "color: #666; font-style: italic;",
          "No property parameters loaded. Click 'Load/Reload Property Parameters' to include property parameters in the analysis."
        ))
      }

      checkboxGroupInput(
        session$ns("property_parameters_selection"),
        NULL,
        choices = setNames(
          sapply(params, `[[`, "id"),
          sapply(params, `[[`, "name")
        ),
        selected = sapply(params, `[[`, "id"),
        inline = TRUE
      )
    })

    # Reactive to combine both sets of parameters
    available_parameters <- reactive({
      req(input$base_parameters)  # Only require base parameters

      # Get selected base parameters
      selected_base <- base_parameters[sapply(base_parameters, function(p) p$id %in% input$base_parameters)]

      # Get selected property parameters if any
      selected_property <- NULL
      if (!is.null(property_params()) && !is.null(input$property_parameters_selection)) {
        selected_property <- property_params()[sapply(property_params(),
                                                      function(p) p$id %in% input$property_parameters_selection)]
      }

      # Combine both sets (if property parameters exist)
      if (!is.null(selected_property)) {
        c(selected_base, selected_property)
      } else {
        selected_base
      }
    })

    # Render parameter selection checkboxes
    output$parameter_selection <- renderUI({
      params <- available_parameters()

      # Create checkboxes for each parameter
      checkboxGroupInput(
        session$ns("selected_parameters"),
        "Select Parameters for Analysis:",
        choices = setNames(
          sapply(params, `[[`, "id"),
          sapply(params, `[[`, "name")
        ),
        selected = sapply(params, `[[`, "id"),
        inline = TRUE
      )
    })

    # Reactive value to store analysis results
    analysis_results <- reactiveVal(NULL)

    # Handle Run Analysis button click
    observeEvent(input$run_analysis, {
      req(reactive_config(), available_parameters())

      # Get selected parameters
      selected_params <- available_parameters()

      if (length(selected_params) == 0) {
        showNotification(
          "Please select at least one parameter for analysis.",
          type = "warning"
        )
        return()
      }

      # Store snapshot of selected parameters
      selected_parameters_snapshot(selected_params)

      # Initialize results list
      all_parameter_results <- list()

      withProgress(
        message = 'Running sensitivity analysis. This might take a few seconds...',
        value = 0,
        {
          # For each selected parameter
          for(i in seq_along(selected_params)) {
            param <- selected_params[[i]]

            # Update progress
            incProgress(1/length(selected_params))

            # Get base value
            base_value <- get_parameter_value(reactive_config(), param$id)

            if (!is.null(base_value)) {
              # Create sequence of values based on parameter type
              if (param$type == "year") {
                # For year parameters, use integer sequence within available range
                min_year <- min(year_range())
                max_year <- max(year_range())

                # Create sequence centered around base value
                half_steps <- max(3, floor(input$steps/2))
                min_val <- max(min_year, base_value - input$steps)
                max_val <- min(max_year, base_value + input$steps)
                variation_seq <- seq(min_val, max_val, by = 2)
              } else {
                # For percentage parameters, use percentage variation
                variation_seq <- seq(
                  base_value * (1 + input$variation_range[1]/100),
                  base_value * (1 + input$variation_range[2]/100),
                  length.out = input$steps
                )
              }

              param_results <- list()

              for(j in seq_along(variation_seq)) {
                param_value <- variation_seq[j]
                modified_config <- modify_config(reactive_config(), param$id, param_value)

                data_processor <- DataProcessor$new(
                  scenario_name = sprintf("%s_%s", param$name, round(param_value, 2)),
                  config = modified_config,
                  initial_year = min(year_range()),
                  final_year = max(year_range())
                )

                data_processor$calculate()
                results <- data_processor$get_results()

                # Calculate variation percentage differently for years
                variation_pct <- if (param$type == "year") {
                  param_value - base_value  # Show absolute year difference
                } else {
                  (param_value/base_value - 1) * 100  # Show percentage change
                }

                results$param_value <- param_value
                results$param_variation <- variation_pct
                results$parameter <- param$name
                results$parameter_color <- param$color
                results$param_type <- param$type  # Add parameter type to results

                param_results[[j]] <- results
              }

              all_parameter_results[[param$name]] <- do.call(rbind, param_results)
            }
          }

          final_results <- do.call(rbind, all_parameter_results)
          analysis_results(final_results)
        }
      )
    })

    # Calculate plot heights based on number of parameters
    plot_heights <- reactive({
      req(selected_parameters_snapshot())

      n_params <- length(selected_parameters_snapshot())

      # Sensitivity plot: minimum 400px, then 150px per parameter row (3 columns)
      sensitivity_height <- max(400, ceiling(n_params/3) * 200)

      # Tornado plot: minimum 300px, then 25px per parameter variation
      # Multiply by number of parameters and steps for total variations
      n_variations <- n_params * input$steps
      tornado_height <- max(300, n_variations * 12)

      list(
        sensitivity = sensitivity_height,
        tornado = tornado_height
      )
    })

    # Render sensitivity plot container
    output$sensitivity_plot_container <- renderUI({
      req(plot_heights())
      plotOutput(session$ns("sensitivity_plots"),
                 height = sprintf("%dpx", plot_heights()$sensitivity))
    })

    # Render faceted sensitivity plots
    output$sensitivity_plots <- renderPlot({
      req(analysis_results(), selected_parameters_snapshot())

      # Get initial year from the data
      initial_year <- min(analysis_results()$Year)

      # Get the order of parameters from the snapshot instead of current selections
      ordered_params <- sapply(selected_parameters_snapshot(), `[[`, "name")

      # Find global y-axis limits
      y_limits <- range(analysis_results()$total_asset/1000)
      y_range <- diff(y_limits)

      # Calculate text spacing
      text_height <- y_range * 0.1  # Height of each text entry

      # Calculate fixed y positions for all texts
      max_y <- y_limits[2] + y_range * 0.15  # Position for parameter headers
      text_positions <- seq(
        from = max_y - text_height,  # Start just below header
        by = -text_height,           # Stack downwards
        length.out = input$steps     # One position per variation
      )

      # Prepare text annotations - one per line
      text_data <- analysis_results() %>%
        mutate(parameter = factor(parameter, levels = ordered_params)) %>%
        group_by(parameter, param_variation) %>%
        slice_tail(n = 1) %>%
        group_by(parameter) %>%
        arrange(desc(param_variation)) %>%
        mutate(
          # Modified text labels based on parameter type
          value_text = case_when(
            param_type == "year" ~ sprintf("%.0f", param_value),
            param_type == "percentage" ~ sprintf("%.1f%%", param_value),
            param_type == "currency" ~ sprintf("%.0f €", param_value),  # Round to nearest euro
            TRUE ~ sprintf("%.1f", param_value)
          ),
          text_x = initial_year,
          text_y = text_positions[row_number()]
        ) %>%
        ungroup()

      # Create parameter headers
      param_headers <- text_data %>%
        group_by(parameter) %>%
        slice_head(n = 1) %>%
        mutate(
          value_text = sprintf("%s:", parameter),
          text_y = max_y,  # Fixed position for all headers
          param_variation = 0  # Neutral color
        )

      # Combine regular text and headers
      text_data_combined <- bind_rows(param_headers, text_data)

      # Prepare main plot data
      plot_data <- analysis_results() %>%
        mutate(parameter = factor(parameter, levels = ordered_params))

      # Adjust y limits to accommodate text including headers
      y_limits_adjusted <- c(y_limits[1] - y_range * 0.05,
                             max_y + y_range * 0.05)  # Add small padding above headers

      ggplot() +
        # Add lines
        geom_line(
          data = plot_data,
          aes(x = Year,
              y = total_asset/1000,
              color = param_variation,
              group = param_variation)
        ) +
        # Add text annotations
        geom_text(
          data = text_data_combined,
          aes(x = text_x,
              y = text_y,
              label = value_text,
              color = param_variation),
          hjust = 0,
          vjust = 0,
          size = 4,
          show.legend = FALSE
        ) +
        facet_wrap(~parameter, ncol = 3) +
        scale_color_gradient2(
          low = "blue",
          mid = "#2C3E50",
          high = "red",
          midpoint = 0
        ) +
        coord_cartesian(ylim = y_limits_adjusted) +
        scale_x_continuous(
          limits = c(initial_year, NA)
        ) +
        theme_minimal() +
        labs(
          title = "Impact Range on Asset Value at Different Time Points",
          x = NULL,
          y = "Total Assets (thousands, €)",
          color = "Parameter\nVariation (% or years)"
        ) +
        theme(
          strip.text = element_text(size = 12, face = "bold"),
          strip.background = element_rect(
            fill = "lightgray",
            color = NA
          ),
          panel.grid.minor = element_blank(),
          panel.border = element_rect(color = "gray", fill = NA)
        )
    })

    # Render tornado plot container
    output$tornado_plot_container <- renderUI({
      req(plot_heights())
      plotOutput(session$ns("tornado_plots"),
                 height = sprintf("%dpx", plot_heights()$tornado))
    })

    # Render combined tornado plot
    output$tornado_plots <- renderPlot({
      req(analysis_results(), selected_parameters_snapshot(), processed_data())

      # Get colors from snapshot instead of current selections
      param_colors <- sapply(selected_parameters_snapshot(), `[[`, "color")
      names(param_colors) <- sapply(selected_parameters_snapshot(), `[[`, "name")

      # Get the year range from the data
      min_year <- min(processed_data()$Year)
      max_year <- max(processed_data()$Year)

      # Define the time points we want to analyze
      time_points <- c(5, 10, 20, 30, 45)
      analysis_years <- min_year + time_points

      # Filter only existing years
      existing_analysis_years <- analysis_years[analysis_years <= max_year]

      if(length(existing_analysis_years) == 0) {
        return(ggplot() +
                 annotate("text", x = 0.5, y = 0.5,
                          label = "No analysis years available in the selected range") +
                 theme_void())
      }

      # Get baseline values for each year
      baseline_values <- processed_data() %>%
        filter(Year %in% existing_analysis_years) %>%
        select(Year, total_asset) %>%
        mutate(total_asset = total_asset/1000)

      # Prepare results for plotting with modified labels
      results <- analysis_results() %>%
        filter(Year %in% existing_analysis_years) %>%
        group_by(parameter, param_variation, Year, param_type, param_value) %>%  # Include param_type and param_value
        summarise(
          final_asset = first(total_asset)/1000,
          parameter_color = first(parameter_color),
          .groups = "drop"
        ) %>%
        filter(abs(param_variation) > 0.1) %>%
        left_join(baseline_values, by = "Year", suffix = c("", "_baseline")) %>%
        mutate(
          # Create formatted parameter values based on type
          formatted_value = case_when(
            param_type == "year" ~ sprintf("%.0f", param_value),
            param_type == "percentage" ~ sprintf("%.1f%%", param_value),
            param_type == "currency" ~ sprintf("%.0f €", param_value),
            TRUE ~ sprintf("%.1f", param_value)
          ),
          # Create new parameter label with actual value
          parameter_label = sprintf("%s: %s", parameter, formatted_value),
          year_label = factor(
            sprintf("%d years (Year %d)", Year - min_year, Year),
            levels = sprintf("%d years (Year %d)",
                             sort(existing_analysis_years - min_year),
                             sort(existing_analysis_years))
          )
        ) %>%
        # Group by parameter to maintain consistent ordering
        group_by(parameter) %>%
        mutate(
          # Use the parameter as the primary sort key
          sort_key = cur_group_id()
        ) %>%
        ungroup() %>%
        # Create factor with levels ordered by parameter and then by param_value
        mutate(parameter_label = factor(parameter_label,
                                        levels = unique(parameter_label[order(sort_key, param_value)])))

      # Create the plot
      ggplot(results) +
        geom_vline(
          aes(xintercept = total_asset),
          color = "black",
          linetype = "dashed",
          linewidth = 0.5
        ) +
        geom_segment(
          aes(
            x = total_asset,
            xend = final_asset,
            y = parameter_label,
            yend = parameter_label,
            color = parameter
          )
        ) +
        geom_point(
          aes(
            x = final_asset,
            y = parameter_label,
            color = parameter
          ),
          size = 3
        ) +
        facet_wrap(~year_label, scales = "free_x", ncol = length(existing_analysis_years)) +
        scale_color_manual(values = param_colors) +
        theme_minimal() +
        scale_y_discrete(limits = rev) +
        labs(
          title = "Impact Range on Asset Value at Different Time Points",
          x = "Total Assets (thousands, €)",
          y = NULL,
          color = "Parameter"
        ) +
        theme(
          panel.grid.minor = element_blank(),
          legend.position = "bottom",
          strip.text = element_text(size = 12, face = "bold"),
          strip.background = element_rect(
            fill = "lightgray",
            color = NA
          ),
          panel.spacing = unit(2, "lines")
        )
    })
  })
}
```





styles.css:
```
/* Sidebar Panel Styles */
.sidebar-panel {
    font-size: 0.75rem;
  }

/* Reduce font size for headers in sidebar */
.sidebar-panel h3 {
font-size: 1.0rem !important;
margin-top: 2px !important;
margin-bottom: 2px !important;
}

/* Reduce font size for labels */
.sidebar-panel label {
font-size: 0.75rem;
margin-bottom: 0 !important;
}

/* Reduce font size for inputs */
.sidebar-panel .form-control {
font-size: 0.75rem;
padding: 0px 6px !important;
height: auto !important;
}

/* Remove spinner buttons from numeric input */
.sidebar-panel .form-control[type='number'] {
-moz-appearance: textfield;
}
.sidebar-panel .form-control[type='number']::-webkit-outer-spin-button,
.sidebar-panel .form-control[type='number']::-webkit-inner-spin-button {
-webkit-appearance: none;
margin: 0;
}

/* Slider styles */
.irs-min, .irs-max, .irs-single, .irs-from, .irs-to {
font-size: 9px !important;
}

.irs {
margin-top: 0px !important;
margin-bottom: 0px !important;
height: 45px !important;
}

.irs-grid-text {
display: none !important;
}

/* Form elements styles */
.form-check-label {
font-size: 10px !important;
margin-bottom: 0 !important;
}

.form-check {
margin-bottom: 0px !important;
padding-top: 0 !important;
padding-bottom: 0 !important;
}

/* Accordion styles */
.accordion-button {
font-size: 10px !important;
padding: 2px !important;
}

/* Info icon styles */
.info-icon {
font-size: 10px !important;
color: #007bff;
cursor: help;
}

/* Input container styles */
.sidebar-input-container {
margin-bottom: 2px !important;
}

.sidebar-input-container .form-control {
padding-top: 0px;
padding-bottom: 0px;
}

/* Form group styles */
.form-group {
margin-bottom: 0px !important;
}

/* Property management section styles */
#property_management .accordion-body {
padding-top: 0px !important;
padding-bottom: 0px !important;
}

/* Title styles */
.sidebar-title {
font-size: 1rem;
font-weight: bold;
margin-bottom: 5px;
text-align: center;
color: #2c3e50;
}

/* Tab styles */
.nav-tabs {
font-size: 0.8rem;
}

.nav-tabs .nav-link {
padding: 2.5px 10px;
}

/* Upload button styles */
.upload-btn {
width: 100%;
margin-top: 1px;
}

/* Tab content styles */
.tab-content > .tab-pane {
padding: 0 !important;
margin: 0 !important;
}

/* Collapse toggle styles */
.collapse-toggle {
  font-size: 10px !important;
  margin-top: 2px !important;
  margin-bottom: 2px !important;
  padding: 0 !important;
  cursor: pointer;
  color: #007bff;
  }

.collapse-toggle:hover {
    text-decoration: underline;
}
````





main.js:
```
// www/js/main.js
$(document).ready(function() {
  // Handle regular toggles (non-property section)
  function initializeRegularToggles() {
      $('.collapse-toggle').each(function() {
          var $button = $(this);
          var targetId = $button.next('.collapse').attr('id');
          
          $button.off('click').on('click', function() {
              var $target = $('#' + targetId);
              var isCollapsed = !$target.hasClass('show');
              
              if (isCollapsed) {
                  $target.collapse('show');
                  $button.text('Hide additional parameters');
              } else {
                  $target.collapse('hide');
                  $button.text('Show more parameters');
              }
          });
      });
  }

  // Initialize on page load
  initializeRegularToggles();

  // Re-initialize after Shiny updates
  $(document).on('shiny:value', function() {
      setTimeout(initializeRegularToggles, 100);
  });

  // Re-initialize after any Shiny binding
  $(document).on('shiny:bound', function() {
      setTimeout(initializeRegularToggles, 100);
  });
});
```




plotYearlyAssetProgressionModule.R:
```
library(shiny)
library(ggplot2)
library(dplyr)
library(tidyr)

plotYearlyAssetProgressionModuleUI <- function(id) {
  ns <- NS(id)
  tagList(
    plotOutput(ns("result_plot"), height = "600px")
  )
}

plotYearlyAssetProgressionModuleServer <- function(id, data, reactive_config, year_range) {
  moduleServer(id, function(input, output, session) {

    filtered_data <- reactive({
      req(data(), year_range())
      data() %>%
        filter(Year >= year_range()[1] & Year <= year_range()[2])
    })

    # Function to extract landmarks from config
    get_landmarks <- function(config) {
      landmarks <- list()

      # Children
      # Get base children parameters
      first_child_year <- get_parameter_value(config, "family.year_first_child_is_born")
      second_child_year <- get_parameter_value(config, "family.year_second_child_is_born")
      num_extra_children <- get_parameter_value(config, "family.number_extra_children")
      first_extra_child_year <- get_parameter_value(config, "family.year_first_extra_child")
      extra_child_spacing <- get_parameter_value(config, "family.extra_child_born_after")

      # Process all children
      if (!is.null(first_child_year) && first_child_year < year_range()[2]) {
        landmarks$child_1 <- list(
          year = first_child_year,
          year_end = Inf,
          label = "Child 1 birth",
          is_retirement = FALSE,
          color = "#2CA02C"  # Bright green
        )

        if (!is.null(second_child_year) && second_child_year < year_range()[2]) {
          landmarks$child_2 <- list(
            year = second_child_year,
            year_end = Inf,
            label = "Child 2 birth",
            is_retirement = FALSE,
            color = "#2CA02C"  # Same green for consistency
          )

          # Handle extra children if any
          if (!is.null(num_extra_children) && num_extra_children > 0 && first_extra_child_year < year_range()[2]) {
            for (extra_child_number in 3:(num_extra_children+2)) {

              # Calculate year for this child
              extra_child_year <- if (extra_child_number == 3) {
                first_extra_child_year
              } else {
                first_extra_child_year + ((extra_child_number-1) * extra_child_spacing)
              }

              landmarks[[paste0("child_", extra_child_number)]] <- list(
                year = extra_child_year,
                year_end = Inf,
                label = paste("Child", extra_child_number, "birth"),
                is_retirement = FALSE,
                color = "#2CA02C"  # Same green for consistency
              )
            }
          }
        }
      }

      # Lump sums
      lump_sum_1_year <- get_parameter_value(config, "lump_sum.lump_sum_1_year")
      lump_sum_2_year <- get_parameter_value(config, "lump_sum.lump_sum_2_year")
      if (!is.null(lump_sum_1_year) && lump_sum_1_year < year_range()[2]) {
        landmarks$lump_sum_1 <- list(
          year = lump_sum_1_year,
          year_end = Inf,
          label = "Lump Sum 1",
          is_retirement = FALSE,
          color = "#9467BD"  # Distinct purple
        )
      }
      if (!is.null(lump_sum_2_year) && lump_sum_2_year < year_range()[2]) {
        landmarks$lump_sum_2 <- list(
          year = lump_sum_2_year,
          year_end = Inf,
          label = "Lump Sum 2",
          is_retirement = FALSE,
          color = "#9467BD"  # Same purple for consistency
        )
      }

      # Properties
      property_colors <- c("#FF7F0E",  # Orange
                           "#E377C2",   # Pink
                           "#17BECF")   # Cyan

      if (!is.null(config$properties)) {
        for (i in seq_along(config$properties)) {
          property <- config$properties[[i]]
          purchase_year <- get_parameter_value(config,
                                               sprintf("properties.%s.purchase_year", property$name))
          sale_year <- get_parameter_value(config,
                                           sprintf("properties.%s.sale_year", property$name))

          if (!is.null(purchase_year) && purchase_year < year_range()[2]) {
            # Use modulo to cycle through colors if more properties than colors
            color_index <- ((i-1) %% length(property_colors)) + 1

            landmarks[[paste0(property$name, "_purchase")]] <- list(
              year = purchase_year,
              year_end = ifelse(sale_year > year_range()[2], Inf, sale_year),
              label = sprintf("%s (%s)",
                              property$name,
                              if(property$type == "home") "Home" else "Investment"),
              is_retirement = FALSE,
              color = property_colors[color_index]
            )
          }
        }
      }

      # Retirement
      retirement_year <- get_parameter_value(config, "general_life.expected_year_retirement")
      if (!is.null(retirement_year) && retirement_year < year_range()[2]) {
        landmarks$retirement <- list(
          year = retirement_year,
          year_end = Inf,
          label = "Retirement",
          color = "#2C3E50",
          is_retirement = TRUE
        )
      }

      return(landmarks)
    }

    output$result_plot <- renderPlot({
      plot_data <- filtered_data()

      # Get year range for x-axis breaks
      year_range <- max(plot_data$Year) - min(plot_data$Year)
      year_step <- if (year_range <= 15) 1
      else if (year_range <= 25) 2
      else 4
      years_to_display <- seq(min(plot_data$Year),
                              max(plot_data$Year),
                              by = year_step)

      # Calculate y-axis limits
      min_y <- max(-500, min(plot_data$total_asset/1000))  # Convert to thousands and compare with -500
      max_y <- max(plot_data$total_asset/1000)

      # Create base plot
      p <- ggplot() +
        theme_minimal()

      # Add landmarks
      landmarks <- get_landmarks(reactive_config())

      # Create data frame for legend with order preservation
      legend_data <- data.frame(
        x = numeric(),
        y = numeric(),
        year_end = numeric(),
        label = character(),
        color = character(),
        order = numeric(),
        stringsAsFactors = FALSE
      )

      # Counter for preserving order
      order_counter <- 1

      # Create data frames for ranges and points
      range_data <- data.frame(
        xmin = numeric(),
        xmax = numeric(),
        ymin = numeric(),
        ymax = numeric(),
        fill = character(),
        is_retirement = logical(),
        stringsAsFactors = FALSE
      )

      point_data <- data.frame(
        x = numeric(),
        color = character(),
        stringsAsFactors = FALSE
      )

      for (landmark in landmarks) {
        if (grepl("Retirement|property", landmark$label)) {

          if (landmark$year_end > min(plot_data$Year)) {
            # Add to range_data
            if(landmark$is_retirement) {
              range_data <- rbind(range_data,
                                  data.frame(
                                    xmin = landmark$year,
                                    xmax = Inf,
                                    ymin = -Inf,
                                    ymax = Inf,
                                    fill = landmark$color,
                                    is_retirement = TRUE
                                  ))
            } else {
              range_data <- rbind(range_data,
                                  data.frame(
                                    xmin = landmark$year,
                                    xmax = landmark$year_end,
                                    ymin = -Inf,
                                    ymax = max_y*0.2,
                                    fill = landmark$color,
                                    is_retirement = FALSE
                                  ))
            }
          }
        } else {
          # Add to point_data
          if (landmark$year >= min(plot_data$Year)) {
            point_data <- rbind(point_data,
                                data.frame(
                                  x = landmark$year,
                                  color = landmark$color
                                ))
          }
        }

          # Add to legend data
          if (landmark$year <= max(plot_data$Year)) {
            legend_data <- rbind(legend_data,
                                 data.frame(
                                   x = min(plot_data$Year),
                                   y = max_y,
                                   year_end = landmark$year_end,
                                   label = landmark$label,
                                   color = landmark$color,
                                   order = order_counter,
                                   is_retirement = landmark$is_retirement,
                                   stringsAsFactors = FALSE
                                 ))
            order_counter <- order_counter + 1
          }

        # Add ranges and points to plot
        if (nrow(range_data) > 0) {
          # Add retirement ranges
          retirement_ranges <- range_data[range_data$is_retirement, ]
          if (nrow(retirement_ranges) > 0) {
            p <- p + geom_rect(data = retirement_ranges,
                               aes(xmin = xmin, xmax = xmax,
                                   ymin = ymin, ymax = ymax),
                               fill = retirement_ranges$fill,
                               alpha = 0.2)
          }

          # Add other ranges
          other_ranges <- range_data[!range_data$is_retirement, ]
          if (nrow(other_ranges) > 0) {
            p <- p + geom_rect(data = other_ranges,
                               aes(xmin = xmin, xmax = xmax,
                                   ymin = ymin, ymax = ymax),
                               fill = other_ranges$fill,
                               alpha = 0.1)
          }
        }

        # Add point landmarks
        if (nrow(point_data) > 0) {
          p <- p + geom_vline(data = point_data,
                              aes(xintercept = x),
                              color = point_data$color,
                              linetype = "dashed",
                              alpha = 0.8)
        }

        # Only add to legend if landmark starts within or before the year range
        if (landmark$year <= max(plot_data$Year)) {
          legend_data <- rbind(legend_data,
                               data.frame(
                                 x = min(plot_data$Year),
                                 y = max(plot_data$total_asset/1000),
                                 year_end = landmark$year_end,
                                 label = landmark$label,
                                 color = landmark$color,
                                 order = order_counter,
                                 is_retirement = landmark$is_retirement,
                                 stringsAsFactors = FALSE
                               ))
          order_counter <- order_counter + 1
        }
      }

      # Modify the legend creation section:
      if (nrow(legend_data) > 0) {
        # Create separate data frames for retirement and other landmarks
        range_legend <- legend_data %>%
          filter(grepl("Retirement|property", label)) %>%
          group_by(label, color) %>%
          slice(1) %>%
          ungroup() %>%
          arrange(order)

        other_legend <- legend_data %>%
          filter(!grepl("Retirement|property", label)) %>%
          group_by(label, color) %>%
          slice(1) %>%
          ungroup() %>%
          arrange(order)

        # Add dummy segments for legend only if we have data
        if (nrow(range_legend) > 0) {
          p <- p +
            # For retirement: solid rectangle
            geom_rect(data = range_legend,
                      aes(xmin = x,
                          xmax = x + 1,
                          ymin = y - 0.1,
                          ymax = y + 0.1,
                          fill = label),
                      alpha = 0.2) +
            scale_fill_manual(values = setNames(range_legend$color,
                                                range_legend$label))
        }

        if (nrow(other_legend) > 0) {
          p <- p +
            # For other landmarks: dashed line
            geom_segment(data = other_legend,
                         aes(x = x,
                             xend = x + 1,  # Use direct calculation instead of xend
                             y = y,
                             yend = y,
                             color = label),
                         linetype = "dashed") +
            scale_color_manual(values = setNames(other_legend$color,
                                                 other_legend$label))
        }

        # Add guides only if we have both types of landmarks
        p <- p + guides(
          color = guide_legend(override.aes = list(
            linetype = "dashed",
            alpha = 0.8
          )),
          fill = guide_legend(override.aes = list(
            alpha = 0.2
          ))
        )
      }

      # Combine the legends
      p <- p +
        # Main asset line
        geom_line(data = plot_data,
                  aes(x = Year, y = total_asset/1000),
                  color = "#2C3E50",  # Dark grey
                  size = 1) +

        coord_cartesian(ylim = c(min_y, max_y)) +

        theme(legend.position = "bottom",
              legend.box = "horizontal",
              legend.title = element_blank())

      # In the final plot additions, combine the legends:
      p + labs(title = "Total Asset Evolution, inflation-corrected (thousands, €)",
               x = NULL,
               y = NULL) +  # Remove duplicate color and fill labels
        theme(legend.position = "bottom",
              axis.text.x = element_text(angle = 90, hjust = 1),
              legend.box = "vertical",    # Change from "horizontal" to "vertical"
              legend.margin = margin(),   # Reduce margin between legends
              legend.spacing = unit(0.1, "cm"),  # Reduce spacing between legends
              legend.title = element_blank()) +  # Remove legend titles
        scale_x_continuous(breaks = years_to_display) +
        scale_y_continuous(
          limits = c(min_y, max_y),
          labels = scales::label_number(
            big.mark = ",",
            accuracy = 1,
            scale = 1
          )
        )
    })
  })
}

```


constants.R:
```
ESSENTIAL_PARAMS <- list(
  general_life = c("net_annual_income", "living_style_costs", "savings", "expected_year_retirement"),
  family = c("year_first_child_is_born", "year_second_child_is_born"),
  rental = c("rent_month", "fixed_housing_costs"),
  passive_investing = c("expected_return_on_investment"),
  taxes_description = c("inflation", "income_tax"),
  lump_sum = c("lump_sum_1", "lump_sum_1_year"),
  property_tax = c()
)

# Add other constants that might be used across modules
PROPERTY_TYPES <- c(
  "Home" = "home",
  "Investment" = "investment"
)

DEFAULT_YEARS <- list(
  MIN_YEAR = 2025,
  MAX_YEAR = 2075
)

```

inputs.yaml:
```
general_life:
  title: "Financial Life"
  inputs:
    - id: "net_annual_income"
      type: "numericInput"
      label: "Net annual income (EUR/month)"
      value: 2000
      description: "Your monthly net income after income, solidarity, and church taxes and payment of insurances, including health insurance, pension insurance, unemployment insurance, and any other insurances discounted directly from salary."
    - id: "living_style_costs"
      type: "numericInput"
      label: "Living Standard costs (without housing costs) (EUR/month)"
      value: 1200
      description: "Your monthly living expenses excluding housing. This include all other expenses, like holidays, clothes, dinning out, groceries, etc (NOT health insurance)."
    - id: "percent_income_investing"
      type: "numericInput"
      label: "Percent income dedicated to investing (%)"
      value: 0
      description: "Percentage of income dedicated to passive investing, e.g. in ETFs, stocks, dividends, etc."
    - id: "savings"
      type: "numericInput"
      label: "Savings (EUR)"
      value: 10000
      description: "Current savings amount."
    - id: "savings_emergency_reserve"
      type: "numericInput"
      label: "Emergency reserve (EUR)"
      value: 24000
      description: "Amount set aside for emergencies. This is an emergency fund with extreme liquidity for immediate access in case of emergencies. A general recommendation is to enough emergency funds to cover 3-6 months of living expenses."
    - id: "salaries_growth_start_career"
      type: "numericInput"
      label: "Salaries growth at start career (% per year)"
      value: 4.5
      description: "The average expected salary growth rate at the start of your career. Salaries tend to grow faster at te beginning of the career. Also, different career paths have largely different career growth."
    - id: "salaries_growth_end_career"
      type: "numericInput"
      label: "Salaries growth at end career (% per year)"
      value: 2
      description: "Expected salary growth rate at the end of your career."
    - id: "expected_year_retirement"
      type: "numericInput"
      label: "Expected year of retirement"
      value: 2060
      description: "The year you expect to retire."
    - id: "expected_salary_reduction_retirement"
      type: "numericInput"
      label: "Expected salary reduction upon retirement (%)"
      value: 50.00
      description: "Expected percentage reduction in salary upon retirement."

family:
  title: "Family Size and Associated Costs"
  inputs:
    - id: "annual_cost_per_child_0_3"
      type: "numericInput"
      label: "Annual cost per child 0-3 years (EUR/child/year)"
      value: 3450
      description: "Annual cost for a child aged 0-3 years."
    - id: "annual_cost_per_child_4_10"
      type: "numericInput"
      label: "Annual cost per child 4-10 years (EUR/child/year)"
      value: 5000
      description: "Annual cost for a child aged 4-10 years."
    - id: "annual_cost_per_child_11_18"
      type: "numericInput"
      label: "Annual cost per child 11-18 years (EUR/child/year)"
      value: 6875
      description: "Annual cost for a child aged 11-18 years."
    - id: "annual_cost_per_child_19_25"
      type: "numericInput"
      label: "Annual cost per child 19-25 years (EUR/child/year)"
      value: 9000
      description: "Annual cost for a child aged 19-25 years."
    - id: "elterngeld"
      type: "numericInput"
      label: "Parental allowance (EUR/child/year)"
      value: 2400
      description: "Parental allowance per child (Elterngeld)."
    - id: "living_costs_change_elternzeit"
      type: "numericInput"
      label: "Home costs reduction during parental leave (%)"
      value: 50.00
      description: "Percentage reduction in living costs during parental leave (Elternzeit)."
    - id: "salary_reduction_elternzeit"
      type: "numericInput"
      label: "Salary reduction during parental leave (%)"
      value: 50.00
      description: "Percentage of salary reduction during parental leave (Elternzeit)."
    - id: "year_first_child_is_born"
      type: "numericInput"
      label: "Year first child is born"
      value: 2025
      description: "Expected birth year of first child."
    - id: "year_second_child_is_born"
      type: "numericInput"
      label: "Year second child is born"
      value: 2027
      description: "Expected birth year of second child."
    - id: "number_extra_children"
      type: "numericInput"
      label: "Number of extra children"
      value: 0
      description: "Number of additional children."
    - id: "year_first_extra_child"
      type: "numericInput"
      label: "Year first extra child is born"
      value: 2100
      description: "Expected birth year of first additional child."
    - id: "extra_child_born_after"
      type: "numericInput"
      label: "Extra child born after X years of the second child"
      value: 2
      description: "Years between additional children."

rental:
  title: "Rental Costs"
  inputs:
    - id: "rent_month"
      type: "numericInput"
      label: "Rent (EUR/month)"
      value: 1320
      description: "Monthly rent payment."
    - id: "rental_prices_growth"
      type: "numericInput"
      label: "Rental prices growth (% per year)"
      value: 5
      description: "Annual growth rate of rental prices. Usually follows the growth of the property price."
    - id: "fixed_housing_costs"
      type: "numericInput"
      label: "Fixed housing costs (Nebenkosten) (EUR/month)"
      value: 330
      description: "Monthly fixed housing costs."
    - id: "fixed_housing_costs_change"
      type: "numericInput"
      label: "Fixed housing costs (Nebenkosten) change rate (% per year)"
      value: 2
      description: "Annual change rate of the fixed housing costs (Nebenkosten). Usually follows the inflation."

passive_investing:
  title: "Passive Investing"
  inputs:
    - id: "expected_return_on_investment"
      type: "numericInput"
      label: "Expected return on investment (% per year)"
      value: 10.00
      description: "Current expected annual return on investments. This refers to passive investments, e.g. ETFs, stocks, dividends."
    - id: "expected_conservative_return_on_investment"
      type: "numericInput"
      label: "Expected return on investment by retirement age (% per year)"
      value: 4.00
      description: "Expected annual return on investments at age of retirement. It is common practice to shift over the years to less risky and more conservative investments, with reduced returns."

taxes_description:
  title: "Taxes and Inflation"
  inputs:
    - id: "inflation"
      type: "numericInput"
      label: "Inflation (% per year)"
      value: 2.00
      description: "Expected annual inflation rate."
    - id: "interest_rate_cash_flow_debt"
      type: "numericInput"
      label: "Interest rate on standing debt (% per year)"
      value: 12
      description: "Interest rate on any standing debt. When one goes into debt with a crediting institution (e.g.: credit card debit), the creditor will charge large interest rates."
    - id: "income_tax"
      type: "numericInput"
      label: "Income tax (%)"
      value: 42
      description: "Tax rate on income"
    - id: "solidarity_surcharge_tax"
      type: "numericInput"
      label: "Solidarity surcharge tax (%)"
      value: 5.5
      description: "Solidarity surcharge tax rate (Solidaritätszuschlag)."
    - id: "church_tax"
      type: "numericInput"
      label: "Church tax (%)"
      value: 0
      description: "Church tax rate (Kirchensteuer)."
    - id: "capital_gains_tax_rate"
      type: "numericInput"
      label: "Taxes on investment/capital gains (%)"
      value: 25.00
      description: "Tax rate on investment/capital gains (Spekulationssteuer)."

lump_sum:
  title: "Lump Sums"
  inputs:
    - id: "lump_sum_1"
      type: "numericInput"
      label: "Lump sum 1 (EUR)"
      value: 50000
      description: "First lump sum. This value refers to any major monetary gain or loss, e.g. inheritance, medical bills, car purchase, etc."
    - id: "lump_sum_1_year"
      type: "numericInput"
      label: "Year receiving the first Lump Sum"
      value: 2045
      description: "Year of first lump sum."
    - id: "lump_sum_2"
      type: "numericInput"
      label: "Lump sum 2 (EUR)"
      value: 0
      description: "Second lump sum. This value refers to any major monetary gain or loss, e.g. inheritance, medical bills, car purchase, etc."
    - id: "lump_sum_2_year"
      type: "numericInput"
      label: "Year receiving the second Lump Sum"
      value: 2100
      description: "Year of second lump sum."

property_tax:
  title: "Costs Associated with Purchasing Property"
  inputs:
    - id: "estate_agent_fees"
      type: "numericInput"
      label: "Estate agent fees (% purchase price)"
      value: 3.57
      description: "Estate agent fees as a percentage of property purchase price."
    - id: "notary_fees_purchase"
      type: "numericInput"
      label: "Notary fees (% purchase price)"
      value: 2
      description: "Notary fees as a percentage of the property purchase price"
    - id: "purchase_tax"
      type: "numericInput"
      label: "Property purchase tax (% purchase price)"
      value: 6
      description: "Property purchase tax as a percentage of the property purchase price."
    - id: "real_estate_agent_fees_sale"
      type: "numericInput"
      label: "Real Estate Agent Fees (% of sale price)"
      value: 3.57
      description: "Typically range from 3% to 7% of the sale price."
    - id: "notary_fees_sale"
      type: "numericInput"
      label: "Notary Fees (% of sale price)"
      value: 1
      description: "Notary fees for the sale contract usually range from 1% to 1.5% of the sale price."
    - id: "property_transfer_taxes_sale"
      type: "numericInput"
      label: "Property Transfer Taxes (% of sale price)"
      value: 6.5
      description: "Property Transfer Tax (Grunderwerbsteuer):This tax is generally around 6% to 7% of the sale price in Berlin."
    - id: "miscelanous_fees_costs_sale"
      type: "numericInput"
      label: "Miscellaneous Costs (% of sale price)"
      value: 0.1
      description: "Additional costs may include property valuation fees (if applicable), marketing costs, and administrative expenses."

properties:
  - name: "property1"
    type: "home"
    inputs:
      - id: "value_growth"
        type: "numericInput"
        label: "Home Property Year-on-Year value Growth (% per year)"
        value: 5.00
        description: "Annual growth rate of the investment property value"
      - id: "value_today"
        type: "numericInput"
        label: "Home property price today (EUR)"
        value: 690000
        description: "Current market value of the property"
      - id: "purchase_year"
        type: "numericInput"
        label: "Year property purchase"
        value: 2035
        description: "Year when the property will be purchased"
      - id: "sale_year"
        type: "numericInput"
        label: "Year property sold"
        value: 2045
        description: "Year when the property will be sold"
      - id: "initial_interest_rate"
        type: "numericInput"
        label: "Interest rate on mortgage (% per year)"
        value: 3.70
        description: "Interest rate for the mortgage"
      - id: "principal_repayment_rate"
        type: "numericInput"
        label: "Principal repayment rate (% per year)"
        value: 2.00
        description: "Annual rate of mortgage principal repayment (Rückzahlungsrate)."

      - id: "loan_family_friends"
        type: "numericInput"
        label: "Loan from family/friends (EUR)"
        value: 50000
        description: "Amount borrowed from family or friends"
      - id: "interest_rate_family_friends"
        type: "numericInput"
        label: "Interest rate on loan from family/friends (% per year)"
        value: 3.70
        description: "Interest rate for family/friends loan"
      - id: "duration_payback_family_friends"
        type: "numericInput"
        label: "Duration payback family/friends loan (years)"
        value: 10
        description: "Duration to pay back family/friends loan"

      - id: "property_taxes_rate"
        type: "numericInput"
        label: "Property taxes rate (% property value per year)"
        value: 0.30
        description: "Annual property tax rate"
      - id: "maintenance_cost_rate"
        type: "numericInput"
        label: "Maintenance cost rate (% property value per year)"
        value: 0.75
        description: "Annual maintenance cost as a percentage of property value"
      - id: "hausgeld_fees_total"
        type: "numericInput"
        label: "Hausgeld (EUR/month)"
        value: 330
        description: "Monthly Hausgeld fees total. Sum of all other Hausgeld fees and costs: Building maintenance, utilities, reserve fund contributions, property management fees, building insurance, etc."
      - id: "hausgeld_maintenance_costs"
        type: "numericInput"
        label: "Hausgeld - Building maintenance (EUR/month)"
        value: 75
        description: "Monthly Hausgeld building maintenance costs."
      - id: "hausgeld_utilities"
        type: "numericInput"
        label: "Hausgeld - Utilities (EUR/month)"
        value: 125
        description: "Monthly Hausgeld utilities costs."
      - id: "hausgeld_reserve_fund"
        type: "numericInput"
        label: "Hausgeld - Reserve fund contributions (EUR/month)"
        value: 40
        description: "Monthly Hausgeld reserve fund contributions."
      - id: "hausgeld_house_management_fee"
        type: "numericInput"
        label: "Hausgeld - Property management fee (EUR/month)"
        value: 40
        description: "Monthly Hausgeld property management fee."
      - id: "hausgeld_building_insurance"
        type: "numericInput"
        label: "Hausgeld - Building insurance (EUR/month)"
        value: 50
        description: "Monthly Hausgeld building insurance cost."

  - name: "property2"
    type: "investment"
    inputs:
      - id: "value_growth"
        type: "numericInput"
        label: "Investment Property Year-on-Year value Growth (% per year)"
        value: 5.00
        description: "Annual growth rate of the investment property value"
      - id: "value_today"
        type: "numericInput"
        label: "Property price today (EUR)"
        value: 415000
        description: "Current market value of the property."
      - id: "purchase_year"
        type: "numericInput"
        label: "Year property purchase"
        value: 2055
        description: "Year when the property will be purchased."
      - id: "sale_year"
        type: "numericInput"
        label: "Year property sold"
        value: 2060
        description: "Year when the property will be sold."
      - id: "initial_interest_rate"
        type: "numericInput"
        label: "Interest rate on mortgage (% per year)"
        value: 3.70
        description: "Interest rate for the mortgage"
      - id: "principal_repayment_rate"
        type: "numericInput"
        label: "Principal repayment rate (% per year)"
        value: 2.00
        description: "Annual rate of mortgage principal repayment (Rückzahlungsrate)"

      - id: "loan_family_friends"
        type: "numericInput"
        label: "Loan from family/friends (EUR)"
        value: 50000
        description: "Amount borrowed from family or friends"
      - id: "interest_rate_family_friends"
        type: "numericInput"
        label: "Interest rate on loan from family/friends (% per year)"
        value: 3.70
        description: "Interest rate for family/friends loan"
      - id: "duration_payback_family_friends"
        type: "numericInput"
        label: "Duration payback family/friends loan (years)"
        value: 10
        description: "Duration to pay back family/friends loan"


      - id: "cold_lease_today"
        type: "numericInput"
        label: "Cold lease today (EUR/month)"
        value: 1155
        description: "Current monthly cold lease amount"
      - id: "lease_rental_growth"
        type: "numericInput"
        label: "Lease rental prices growth (% per year)"
        value: 5.00
        description: "Annual growth rate of lease rental prices"
      - id: "yearly_depreciation_rate"
        type: "numericInput"
        label: "Depreciation (AfA) (% per year)"
        value: 2.00
        description: "Annual depreciation rate of a property's price when purchased. Used for taxes deduction calculation."
      - id: "vacancy_months"
        type: "numericInput"
        label: "Vacancy costs (number of vacant month per year)"
        value: 1.00
        description: "Number of months per year the property is expected to be vacant"
      - id: "property_management_rate"
        type: "numericInput"
        label: "Property Management Fees (% of cold rent)"
        value: 7.50
        description: "Property management fees as a percentage of annual rent"
      - id: "property_taxes_rate"
        type: "numericInput"
        label: "Property taxes rate (% property value per year)"
        value: 0.30
        description: "Annual property tax rate"
      - id: "maintenance_cost_rate"
        type: "numericInput"
        label: "Maintenance cost rate (% property value per year)"
        value: 0.75
        description: "Annual maintenance cost as a percentage of property value"
      - id: "hausgeld_fees_total"
        type: "numericInput"
        label: "Hausgeld (EUR/month)"
        value: 330
        description: "Monthly Hausgeld fees total. Sum of all other Hausgeld fees and costs: Building maintenance, utilities, reserve fund contributions, property management fees, building insurance, etc."
      - id: "hausgeld_maintenance_costs"
        type: "numericInput"
        label: "Hausgeld - Building maintenance (EUR/month)"
        value: 75
        description: "Monthly Hausgeld building maintenance costs."
      - id: "hausgeld_utilities"
        type: "numericInput"
        label: "Hausgeld - Utilities (EUR/month)"
        value: 125
        description: "Monthly Hausgeld utilities costs."
      - id: "hausgeld_reserve_fund"
        type: "numericInput"
        label: "Hausgeld - Reserve fund contributions (EUR/month)"
        value: 40
        description: "Monthly Hausgeld reserve fund contributions."
      - id: "hausgeld_house_management_fee"
        type: "numericInput"
        label: "Hausgeld - Property management fee (EUR/month)"
        value: 40
        description: "Monthly Hausgeld property management fee."
      - id: "hausgeld_building_insurance"
        type: "numericInput"
        label: "Hausgeld - Building insurance (EUR/month)"
        value: 50
        description: "Monthly Hausgeld building insurance cost."

  - name: "property3"
    type: "investment"
    inputs:
      - id: "value_growth"
        type: "numericInput"
        label: "Investment Property Year-on-Year value Growth (% per year)"
        value: 5.00
        description: "Annual growth rate of the investment property value"
      - id: "value_today"
        type: "numericInput"
        label: "Property price today (EUR)"
        value: 415000
        description: "Current market value of the property."
      - id: "purchase_year"
        type: "numericInput"
        label: "Year property purchase"
        value: 2065
        description: "Year when the property will be purchased."
      - id: "sale_year"
        type: "numericInput"
        label: "Year property sold"
        value: 2070
        description: "Year when the property will be sold."
      - id: "initial_interest_rate"
        type: "numericInput"
        label: "Interest rate on mortgage (% per year)"
        value: 3.70
        description: "Interest rate for the mortgage"
      - id: "principal_repayment_rate"
        type: "numericInput"
        label: "Principal repayment rate (% per year)"
        value: 2.00
        description: "Annual rate of mortgage principal repayment (Rückzahlungsrate)"

      - id: "loan_family_friends"
        type: "numericInput"
        label: "Loan from family/friends (EUR)"
        value: 50000
        description: "Amount borrowed from family or friends"
      - id: "interest_rate_family_friends"
        type: "numericInput"
        label: "Interest rate on loan from family/friends (% per year)"
        value: 3.70
        description: "Interest rate for family/friends loan"
      - id: "duration_payback_family_friends"
        type: "numericInput"
        label: "Duration payback family/friends loan (years)"
        value: 10
        description: "Duration to pay back family/friends loan"


      - id: "cold_lease_today"
        type: "numericInput"
        label: "Cold lease today (EUR/month)"
        value: 1155
        description: "Current monthly cold lease amount"
      - id: "lease_rental_growth"
        type: "numericInput"
        label: "Lease rental prices growth (% per year)"
        value: 5.00
        description: "Annual growth rate of lease rental prices"
      - id: "yearly_depreciation_rate"
        type: "numericInput"
        label: "Depreciation (AfA) (% per year)"
        value: 2.00
        description: "Annual depreciation rate of a property's price when purchased. Used for taxes deduction calculation."
      - id: "vacancy_months"
        type: "numericInput"
        label: "Vacancy costs (number of vacant month per year)"
        value: 1.00
        description: "Number of months per year the property is expected to be vacant"
      - id: "property_management_rate"
        type: "numericInput"
        label: "Property Management Fees (% of cold rent)"
        value: 7.50
        description: "Property management fees as a percentage of annual rent"
      - id: "property_taxes_rate"
        type: "numericInput"
        label: "Property taxes rate (% property value per year)"
        value: 0.30
        description: "Annual property tax rate"
      - id: "maintenance_cost_rate"
        type: "numericInput"
        label: "Maintenance cost rate (% property value per year)"
        value: 0.75
        description: "Annual maintenance cost as a percentage of property value"
      - id: "hausgeld_fees_total"
        type: "numericInput"
        label: "Hausgeld (EUR/month)"
        value: 330
        description: "Monthly Hausgeld fees total. Sum of all other Hausgeld fees and costs: Building maintenance, utilities, reserve fund contributions, property management fees, building insurance, etc."
      - id: "hausgeld_maintenance_costs"
        type: "numericInput"
        label: "Hausgeld - Building maintenance (EUR/month)"
        value: 75
        description: "Monthly Hausgeld building maintenance costs."
      - id: "hausgeld_utilities"
        type: "numericInput"
        label: "Hausgeld - Utilities (EUR/month)"
        value: 125
        description: "Monthly Hausgeld utilities costs."
      - id: "hausgeld_reserve_fund"
        type: "numericInput"
        label: "Hausgeld - Reserve fund contributions (EUR/month)"
        value: 40
        description: "Monthly Hausgeld reserve fund contributions."
      - id: "hausgeld_house_management_fee"
        type: "numericInput"
        label: "Hausgeld - Property management fee (EUR/month)"
        value: 40
        description: "Monthly Hausgeld property management fee."
      - id: "hausgeld_building_insurance"
        type: "numericInput"
        label: "Hausgeld - Building insurance (EUR/month)"
        value: 50
        description: "Monthly Hausgeld building insurance cost."

```

Please read all my files one by one carefully and understand exactly how they work. Please also pay attention to the structure of my folders containing the entire app, and explore how the files relate to each other. Also pay attention to how the different modules relate to each other.

Let me know when you're ready and we can start working on it together by summarising the function of each file in my app and the expected function of files I haven't shared with you.